{
    "name": "Escreg",
    "structs": {
        "AddressWithAuth": [
            {
                "name": "appId",
                "type": "uint64"
            },
            {
                "name": "authAppId",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "register",
            "args": [
                {
                    "type": "uint64",
                    "name": "appId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "registerList",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "appIds"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "exists",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mustGet",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getWithAuth",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)",
                "struct": "AddressWithAuth"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getWithAuthList",
            "args": [
                {
                    "type": "address[]",
                    "name": "addresses"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getList",
            "args": [
                {
                    "type": "address[]",
                    "name": "addresses"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mustGetList",
            "args": [
                {
                    "type": "address[]",
                    "name": "addresses"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "apps": {
                    "keyType": "AVMBytes",
                    "valueType": "uint64[]",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        494,
                        674,
                        734,
                        846,
                        909,
                        1009,
                        1072,
                        1276
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        528
                    ],
                    "errorMessage": "ERR:EXISTS"
                },
                {
                    "pc": [
                        783,
                        793,
                        1386,
                        1393
                    ],
                    "errorMessage": "ERR:NOTFOUND"
                },
                {
                    "pc": [
                        342
                    ],
                    "errorMessage": "ERR:UNAUTH"
                },
                {
                    "pc": [
                        486,
                        661,
                        721,
                        778,
                        834,
                        896,
                        996,
                        1059,
                        1229,
                        1381
                    ],
                    "errorMessage": "Length must be 4"
                },
                {
                    "pc": [
                        134,
                        153,
                        172,
                        191,
                        210,
                        230,
                        250,
                        276,
                        291,
                        307
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        865,
                        1028
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        328
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        137,
                        156,
                        175,
                        194,
                        213,
                        233,
                        253,
                        279,
                        294,
                        310
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        340
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        962,
                        1195,
                        1349
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        548,
                        1093,
                        1248,
                        1293,
                        1404
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAQBCCYHBBUffHUCAAEAAgAABWFkbWluBWFwcElEAwaBATEYQAAFJwQxAGcxG0EBDIIKBCHx3f8E9+magwRyv23EBEyftlYEieeZJARA5lJiBBk2JfgEkMlVDwS1YcJWBIK0Nfg2GgCOCgCvAJ8AkAB2AGIATgA7ACgAFQACIkMxGRREMRhENhoBiASVKExQsCRDMRkURDEYRDYaAYgDvihMULAkQzEZFEQxGEQ2GgGIAuooTFCwJEMxGRREMRhENhoBiAJSKExQsCRDMRkURDEYRDYaAYgCCxYoTFCwJEMxGRREMRhENhoBiAG9FihMULAkQzEZFEQxGEQ2GgGIAW2AAQAiTwJUKExQsCRDMRkURDEYRDYaAYgAbCRDMRkURDEYRDYaAReIADokQzEZFEQxGEQ2GgEXiAANJEMxGUD/PDEYFEQkQ4oBADEAIicEZUQSRLExAIv/sgiyBySyECKyAbOJigEAi/+IAGRJvUUBQAANi/8WKUxQTEm8SEy/iYv/iABfiYoBACKL/yJZIosCiwEMQQA0i/9XAgCLAiULW0mIACtJjAC9RQFAABQWKUxQiwBJvEhMv4sCJAiMAkL/zYsATIgAHEL/7jIMFrCJigEBi/8WJwVMUANRAARJFSMSRImKAgCL/r5Ei/4igQK6FyKLAosBDEEAGYsCSSULgQIIi/5MJboXi/8TRCQIjAJC/9+L/xYpTFBXAgCLAExQSVcCABUlChZXBgJcAIv+vEiL/ky/iYoCASoii/8iWYsBDUEAI4v/VwIAiwElC1tJjAAWJwVMUAOL/hJBAAGJiwEkCIwBQv/TIowAiYoBAYv/FSJLAQ8iSwJPAk0jSwIPI08DTwJNi/9OAlJHAhUjEkS9RQFAAAMiTImLAL5Ei/9MiP+SIhNMiYoBAYv/FSJLAQ8iSwJPAk0jSwIPI08DTwJNi/9OAlJHAhUjEkS9RQFAAAMiTImLAL5Ei/9MiP9WTImKAQGL/xUiSwEPIksCTwJNI0sCDyNPA08CTYv/TgJSSRUjEkRJvUUBRL5Ii/9MiP8jSUSJigEBIkkqi/8VIksBDyJLAk8CTSNLAg8jTwNPAk2L/04CUkcCFSMSRCJMvUUBQQAMiwO+RIv/TIj+5owEi/9zAkxJTgKMAERJFSJLAQ8iSwJPAk0jSwIPI08DTwJNUkmMAUkVIxJEIowCvUUBQQAMiwG+RIsATIj+p4wCiwQWiwIWUIwAiYoBASJHAypJK4v/IlkiiwiLBwxBAKaL/1cCAIsIgSALgSBYSYwDSRUiSwEPIksCTwJNI0sCDyNPA08CTVJJjABJFSMSRCKMBL1FAUEADIsAvkSLA0yI/kOMBIsDcwJMSU4CjAFESRUiSwEPIksCTwJNI0sCDyNPA08CTVJJjAJJFSMSRCKMBb1FAUEADIsCvkSLAUyI/gSMBYsEFosFFlCLBklPAlBMIlkkCBZXBgJcAIwGiwgkCIwIQv9SiwaMAImKAQEiSSori/8iWUmByAELgQoIiwUyDA1BABixgQayEIEFshknBrIeJwayHyKyAbNC/+AijAKLAosEDEEAgYv/VwIAiwKBIAuBIFhJjAFJFSJLAQ8iSwJPAk0jSwIPI08DTwJNUkmMAEkVIxJEvUUBQAAliwOACAAAAAAAAAAAUElXAgAVJQoWVwYCXACMA4sCJAiMAkL/nosAvkSLAUyI/TgWKUxQVwIAiwNMUElXAgAVJQoWVwYCXACMA0L/0IsDjACJigEBK4v/IlkiiwKLAQxBAF2L/1cCAIsCSU4CgSALgSBYSRUiSwEPIksCTwJNI0sCDyNPA08CTUsCTgJSSRUjEkRJvUUBRL5IiPzLSUQWKUxQVwIAiwBMUElXAgAVJQoWVwYCXACMACQIjAJC/5uJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}