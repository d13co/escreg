/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Escreg","structs":{},"methods":[{"name":"register","args":[{"type":"uint64","name":"appId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"registerList","args":[{"type":"uint64[]","name":"appIds"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"exists","args":[{"type":"address","name":"address"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get","args":[{"type":"address","name":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"mustGet","args":[{"type":"address","name":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getList","args":[{"type":"address[]","name":"addresses"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"mustGetList","args":[{"type":"address[]","name":"addresses"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"apps":{"keyType":"AVMBytes","valueType":"uint64[]","prefix":""}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[674,684,908,915],"errorMessage":"App not registered"},{"pc":[368,565,625,798],"errorMessage":"Box must have value"},{"pc":[417],"errorMessage":"ERR:EXISTS"},{"pc":[360,552,612,669,751,903],"errorMessage":"Length must be 4"},{"pc":[92,111,130,150,170,196,211],"errorMessage":"OnCompletion is not NoOp"},{"pc":[232],"errorMessage":"can only call when creating"},{"pc":[95,114,133,153,173,199,214],"errorMessage":"can only call when not creating"},{"pc":[717,871],"errorMessage":"index access is out of bounds"},{"pc":[439,770,815,926],"errorMessage":"max array length exceeded"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAQBCCYEBBUffHUCAAEFYXBwSUQCAAAxG0EAwYIHBPfpmoMEcr9txARMn7ZWBInnmSQEQOZSYgS1YcJWBIK0Nfg2GgCOBwB5AGoAUAA8ACgAFQACIkMxGRREMRhENhoBiALhKExQsCRDMRkURDEYRDYaAYgCNShMULAkQzEZFEQxGEQ2GgGIAe4WKExQsCRDMRkURDEYRDYaAYgBoBYoTFCwJEMxGRREMRhENhoBiAFQgAEAIk8CVChMULAkQzEZFEQxGEQ2GgGIAD8kQzEZFEQxGEQ2GgEXiAANJEMxGUD/cjEYFEQkQ4oBAIv/iABkSb1FAUAADYv/FilMUExJvEhMv4mL/4gAXomKAQAii/8iWSKLAosBDEEANIv/VwIAiwIlC1tJiAArSYwAvUUBQAAUFilMUIsASbxITL+LAiQIjAJC/82LAEyIABtC/+4yDBawiYoBAYv/FipMUANRAARJFSMSRImKAgCL/r5Ei/4igQK6FyKLAosBDEEAKosCJQuBAgiL/kwluheL/xJBAA6ACkVSUjpFWElTVFOwAIsCJAiMAkL/zov/FilMUFcCAIsATFBJVwIAFSUKFlcGAlwAi/68SIv+TL+JigIBgAAii/8iWYsBDUEAIov/VwIAiwElC1tJjAAWKkxQA4v+EkEAAYmLASQIjAFC/9QijACJigEBi/8VIksBDyJLAk8CTSNLAg8jTwNPAk2L/04CUkcCFSMSRL1FAUAAAyJMiYsAvkSL/0yI/5IiE0yJigEBi/8VIksBDyJLAk8CTSNLAg8jTwNPAk2L/04CUkcCFSMSRL1FAUAAAyJMiYsAvkSL/0yI/1ZMiYoBAYv/FSJLAQ8iSwJPAk0jSwIPI08DTwJNi/9OAlJJFSMSREm9RQFEvkiL/0yI/yNJRImKAQEiSSuL/yJZIosEiwMMQQCBi/9XAgCLBIEgC4EgWEmMAUkVIksBDyJLAk8CTSNLAg8jTwNPAk1SSYwASRUjEkS9RQFAACWLAoAIAAAAAAAAAABQSVcCABUlChZXBgJcAIwCiwQkCIwEQv+eiwC+RIsBTIj+qRYpTFBXAgCLAkxQSVcCABUlChZXBgJcAIwCQv/QiwKMAImKAQEri/8iWSKLAosBDEEAXYv/VwIAiwJJTgKBIAuBIFhJFSJLAQ8iSwJPAk0jSwIPI08DTwJNSwJOAlJJFSMSREm9RQFEvkiI/jxJRBYpTFBXAgCLAExQSVcCABUlChZXBgJcAIwAJAiMAkL/m4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":0,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Escreg contract
 */
export type EscregArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'register(uint64)void': {
      appId: bigint | number
    }
    'registerList(uint64[])void': {
      appIds: bigint[] | number[]
    }
    'exists(address)bool': {
      address: string
    }
    'get(address)uint64': {
      address: string
    }
    'mustGet(address)uint64': {
      address: string
    }
    'getList(address[])uint64[]': {
      addresses: string[]
    }
    'mustGetList(address[])uint64[]': {
      addresses: string[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'register(uint64)void': [appId: bigint | number]
    'registerList(uint64[])void': [appIds: bigint[] | number[]]
    'exists(address)bool': [address: string]
    'get(address)uint64': [address: string]
    'mustGet(address)uint64': [address: string]
    'getList(address[])uint64[]': [addresses: string[]]
    'mustGetList(address[])uint64[]': [addresses: string[]]
  }
}

/**
 * The return type for each method
 */
export type EscregReturns = {
  'register(uint64)void': void
  'registerList(uint64[])void': void
  'exists(address)bool': boolean
  'get(address)uint64': bigint
  'mustGet(address)uint64': bigint
  'getList(address[])uint64[]': bigint[]
  'mustGetList(address[])uint64[]': bigint[]
}

/**
 * Defines the types of available calls and state of the Escreg smart contract.
 */
export type EscregTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'register(uint64)void' | 'register', {
      argsObj: EscregArgs['obj']['register(uint64)void']
      argsTuple: EscregArgs['tuple']['register(uint64)void']
      returns: EscregReturns['register(uint64)void']
    }>
    & Record<'registerList(uint64[])void' | 'registerList', {
      argsObj: EscregArgs['obj']['registerList(uint64[])void']
      argsTuple: EscregArgs['tuple']['registerList(uint64[])void']
      returns: EscregReturns['registerList(uint64[])void']
    }>
    & Record<'exists(address)bool' | 'exists', {
      argsObj: EscregArgs['obj']['exists(address)bool']
      argsTuple: EscregArgs['tuple']['exists(address)bool']
      returns: EscregReturns['exists(address)bool']
    }>
    & Record<'get(address)uint64' | 'get', {
      argsObj: EscregArgs['obj']['get(address)uint64']
      argsTuple: EscregArgs['tuple']['get(address)uint64']
      returns: EscregReturns['get(address)uint64']
    }>
    & Record<'mustGet(address)uint64' | 'mustGet', {
      argsObj: EscregArgs['obj']['mustGet(address)uint64']
      argsTuple: EscregArgs['tuple']['mustGet(address)uint64']
      returns: EscregReturns['mustGet(address)uint64']
    }>
    & Record<'getList(address[])uint64[]' | 'getList', {
      argsObj: EscregArgs['obj']['getList(address[])uint64[]']
      argsTuple: EscregArgs['tuple']['getList(address[])uint64[]']
      returns: EscregReturns['getList(address[])uint64[]']
    }>
    & Record<'mustGetList(address[])uint64[]' | 'mustGetList', {
      argsObj: EscregArgs['obj']['mustGetList(address[])uint64[]']
      argsTuple: EscregArgs['tuple']['mustGetList(address[])uint64[]']
      returns: EscregReturns['mustGetList(address[])uint64[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        apps: Map<Uint8Array | string, bigint[]>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type EscregSignatures = keyof EscregTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type EscregNonVoidMethodSignatures = keyof EscregTypes['methods'] extends infer T ? T extends keyof EscregTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Escreg smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends EscregSignatures> = EscregTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Escreg smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EscregSignatures> = EscregTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = EscregTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type EscregCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type EscregDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: EscregCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Escreg smart contract
 */
export abstract class EscregParamsFactory {
  /**
   * Constructs a no op call for the register(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static register(params: CallParams<EscregArgs['obj']['register(uint64)void'] | EscregArgs['tuple']['register(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'register(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
  /**
   * Constructs a no op call for the registerList(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerList(params: CallParams<EscregArgs['obj']['registerList(uint64[])void'] | EscregArgs['tuple']['registerList(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerList(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appIds],
    }
  }
  /**
   * Constructs a no op call for the exists(address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static exists(params: CallParams<EscregArgs['obj']['exists(address)bool'] | EscregArgs['tuple']['exists(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'exists(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the get(address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static get(params: CallParams<EscregArgs['obj']['get(address)uint64'] | EscregArgs['tuple']['get(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the mustGet(address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mustGet(params: CallParams<EscregArgs['obj']['mustGet(address)uint64'] | EscregArgs['tuple']['mustGet(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mustGet(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the getList(address[])uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getList(params: CallParams<EscregArgs['obj']['getList(address[])uint64[]'] | EscregArgs['tuple']['getList(address[])uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getList(address[])uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addresses],
    }
  }
  /**
   * Constructs a no op call for the mustGetList(address[])uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mustGetList(params: CallParams<EscregArgs['obj']['mustGetList(address[])uint64[]'] | EscregArgs['tuple']['mustGetList(address[])uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mustGetList(address[])uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addresses],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Escreg smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class EscregFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `EscregFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new EscregClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new EscregClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Escreg smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: EscregDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new EscregClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escreg smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escreg smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escreg smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new EscregClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Escreg smart contract
 */
export class EscregClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `EscregClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Escreg app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `EscregClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends EscregNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `EscregClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<EscregClient> {
    return new EscregClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `EscregClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<EscregClient> {
    return new EscregClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Escreg smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Escreg smart contract using the `register(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    register: (params: CallParams<EscregArgs['obj']['register(uint64)void'] | EscregArgs['tuple']['register(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscregParamsFactory.register(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `registerList(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerList: (params: CallParams<EscregArgs['obj']['registerList(uint64[])void'] | EscregArgs['tuple']['registerList(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscregParamsFactory.registerList(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `exists(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    exists: (params: CallParams<EscregArgs['obj']['exists(address)bool'] | EscregArgs['tuple']['exists(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscregParamsFactory.exists(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `get(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    get: (params: CallParams<EscregArgs['obj']['get(address)uint64'] | EscregArgs['tuple']['get(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscregParamsFactory.get(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `mustGet(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mustGet: (params: CallParams<EscregArgs['obj']['mustGet(address)uint64'] | EscregArgs['tuple']['mustGet(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscregParamsFactory.mustGet(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `getList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getList: (params: CallParams<EscregArgs['obj']['getList(address[])uint64[]'] | EscregArgs['tuple']['getList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscregParamsFactory.getList(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `mustGetList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mustGetList: (params: CallParams<EscregArgs['obj']['mustGetList(address[])uint64[]'] | EscregArgs['tuple']['mustGetList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscregParamsFactory.mustGetList(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Escreg smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Escreg smart contract using the `register(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    register: (params: CallParams<EscregArgs['obj']['register(uint64)void'] | EscregArgs['tuple']['register(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscregParamsFactory.register(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `registerList(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerList: (params: CallParams<EscregArgs['obj']['registerList(uint64[])void'] | EscregArgs['tuple']['registerList(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscregParamsFactory.registerList(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `exists(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    exists: (params: CallParams<EscregArgs['obj']['exists(address)bool'] | EscregArgs['tuple']['exists(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscregParamsFactory.exists(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `get(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    get: (params: CallParams<EscregArgs['obj']['get(address)uint64'] | EscregArgs['tuple']['get(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscregParamsFactory.get(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `mustGet(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mustGet: (params: CallParams<EscregArgs['obj']['mustGet(address)uint64'] | EscregArgs['tuple']['mustGet(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscregParamsFactory.mustGet(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `getList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getList: (params: CallParams<EscregArgs['obj']['getList(address[])uint64[]'] | EscregArgs['tuple']['getList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscregParamsFactory.getList(params))
    },

    /**
     * Makes a call to the Escreg smart contract using the `mustGetList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mustGetList: (params: CallParams<EscregArgs['obj']['mustGetList(address[])uint64[]'] | EscregArgs['tuple']['mustGetList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscregParamsFactory.mustGetList(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Escreg smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Escreg smart contract using the `register(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    register: async (params: CallParams<EscregArgs['obj']['register(uint64)void'] | EscregArgs['tuple']['register(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscregParamsFactory.register(params))
      return {...result, return: result.return as unknown as (undefined | EscregReturns['register(uint64)void'])}
    },

    /**
     * Makes a call to the Escreg smart contract using the `registerList(uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerList: async (params: CallParams<EscregArgs['obj']['registerList(uint64[])void'] | EscregArgs['tuple']['registerList(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscregParamsFactory.registerList(params))
      return {...result, return: result.return as unknown as (undefined | EscregReturns['registerList(uint64[])void'])}
    },

    /**
     * Makes a call to the Escreg smart contract using the `exists(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    exists: async (params: CallParams<EscregArgs['obj']['exists(address)bool'] | EscregArgs['tuple']['exists(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscregParamsFactory.exists(params))
      return {...result, return: result.return as unknown as (undefined | EscregReturns['exists(address)bool'])}
    },

    /**
     * Makes a call to the Escreg smart contract using the `get(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    get: async (params: CallParams<EscregArgs['obj']['get(address)uint64'] | EscregArgs['tuple']['get(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscregParamsFactory.get(params))
      return {...result, return: result.return as unknown as (undefined | EscregReturns['get(address)uint64'])}
    },

    /**
     * Makes a call to the Escreg smart contract using the `mustGet(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mustGet: async (params: CallParams<EscregArgs['obj']['mustGet(address)uint64'] | EscregArgs['tuple']['mustGet(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscregParamsFactory.mustGet(params))
      return {...result, return: result.return as unknown as (undefined | EscregReturns['mustGet(address)uint64'])}
    },

    /**
     * Makes a call to the Escreg smart contract using the `getList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getList: async (params: CallParams<EscregArgs['obj']['getList(address[])uint64[]'] | EscregArgs['tuple']['getList(address[])uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscregParamsFactory.getList(params))
      return {...result, return: result.return as unknown as (undefined | EscregReturns['getList(address[])uint64[]'])}
    },

    /**
     * Makes a call to the Escreg smart contract using the `mustGetList(address[])uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mustGetList: async (params: CallParams<EscregArgs['obj']['mustGetList(address[])uint64[]'] | EscregArgs['tuple']['mustGetList(address[])uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscregParamsFactory.mustGetList(params))
      return {...result, return: result.return as unknown as (undefined | EscregReturns['mustGetList(address[])uint64[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new EscregClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Escreg smart contract using the `exists(address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async exists(params: CallParams<EscregArgs['obj']['exists(address)bool'] | EscregArgs['tuple']['exists(address)bool']>) {
    const result = await this.appClient.send.call(EscregParamsFactory.exists(params))
    return result.return as unknown as EscregReturns['exists(address)bool']
  }

  /**
   * Makes a readonly (simulated) call to the Escreg smart contract using the `get(address)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async get(params: CallParams<EscregArgs['obj']['get(address)uint64'] | EscregArgs['tuple']['get(address)uint64']>) {
    const result = await this.appClient.send.call(EscregParamsFactory.get(params))
    return result.return as unknown as EscregReturns['get(address)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Escreg smart contract using the `mustGet(address)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async mustGet(params: CallParams<EscregArgs['obj']['mustGet(address)uint64'] | EscregArgs['tuple']['mustGet(address)uint64']>) {
    const result = await this.appClient.send.call(EscregParamsFactory.mustGet(params))
    return result.return as unknown as EscregReturns['mustGet(address)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Escreg smart contract using the `getList(address[])uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getList(params: CallParams<EscregArgs['obj']['getList(address[])uint64[]'] | EscregArgs['tuple']['getList(address[])uint64[]']>) {
    const result = await this.appClient.send.call(EscregParamsFactory.getList(params))
    return result.return as unknown as EscregReturns['getList(address[])uint64[]']
  }

  /**
   * Makes a readonly (simulated) call to the Escreg smart contract using the `mustGetList(address[])uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async mustGetList(params: CallParams<EscregArgs['obj']['mustGetList(address[])uint64[]'] | EscregArgs['tuple']['mustGetList(address[])uint64[]']>) {
    const result = await this.appClient.send.call(EscregParamsFactory.mustGetList(params))
    return result.return as unknown as EscregReturns['mustGetList(address[])uint64[]']
  }

  /**
   * Methods to access state for the current Escreg app
   */
  state = {
    /**
     * Methods to access box state for the current Escreg app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the apps map in box state
       */
      apps: {
        /**
         * Get all current values of the apps map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint[]>> => { return (await this.appClient.state.box.getMap("apps")) as Map<Uint8Array, bigint[]> },
        /**
         * Get a current value of the apps map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint[] | undefined> => { return await this.appClient.state.box.getMapValue("apps", key) as bigint[] | undefined },
      },
    },
  }

  public newGroup(): EscregComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a register(uint64)void method call against the Escreg contract
       */
      register(params: CallParams<EscregArgs['obj']['register(uint64)void'] | EscregArgs['tuple']['register(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.register(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a registerList(uint64[])void method call against the Escreg contract
       */
      registerList(params: CallParams<EscregArgs['obj']['registerList(uint64[])void'] | EscregArgs['tuple']['registerList(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerList(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a exists(address)bool method call against the Escreg contract
       */
      exists(params: CallParams<EscregArgs['obj']['exists(address)bool'] | EscregArgs['tuple']['exists(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.exists(params)))
        resultMappers.push((v) => client.decodeReturnValue('exists(address)bool', v))
        return this
      },
      /**
       * Add a get(address)uint64 method call against the Escreg contract
       */
      get(params: CallParams<EscregArgs['obj']['get(address)uint64'] | EscregArgs['tuple']['get(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.get(params)))
        resultMappers.push((v) => client.decodeReturnValue('get(address)uint64', v))
        return this
      },
      /**
       * Add a mustGet(address)uint64 method call against the Escreg contract
       */
      mustGet(params: CallParams<EscregArgs['obj']['mustGet(address)uint64'] | EscregArgs['tuple']['mustGet(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mustGet(params)))
        resultMappers.push((v) => client.decodeReturnValue('mustGet(address)uint64', v))
        return this
      },
      /**
       * Add a getList(address[])uint64[] method call against the Escreg contract
       */
      getList(params: CallParams<EscregArgs['obj']['getList(address[])uint64[]'] | EscregArgs['tuple']['getList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getList(params)))
        resultMappers.push((v) => client.decodeReturnValue('getList(address[])uint64[]', v))
        return this
      },
      /**
       * Add a mustGetList(address[])uint64[] method call against the Escreg contract
       */
      mustGetList(params: CallParams<EscregArgs['obj']['mustGetList(address[])uint64[]'] | EscregArgs['tuple']['mustGetList(address[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mustGetList(params)))
        resultMappers.push((v) => client.decodeReturnValue('mustGetList(address[])uint64[]', v))
        return this
      },
      /**
       * Add a clear state call to the Escreg contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as EscregComposer
  }
}
export type EscregComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the register(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(params?: CallParams<EscregArgs['obj']['register(uint64)void'] | EscregArgs['tuple']['register(uint64)void']>): EscregComposer<[...TReturns, EscregReturns['register(uint64)void'] | undefined]>

  /**
   * Calls the registerList(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerList(params?: CallParams<EscregArgs['obj']['registerList(uint64[])void'] | EscregArgs['tuple']['registerList(uint64[])void']>): EscregComposer<[...TReturns, EscregReturns['registerList(uint64[])void'] | undefined]>

  /**
   * Calls the exists(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  exists(params?: CallParams<EscregArgs['obj']['exists(address)bool'] | EscregArgs['tuple']['exists(address)bool']>): EscregComposer<[...TReturns, EscregReturns['exists(address)bool'] | undefined]>

  /**
   * Calls the get(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  get(params?: CallParams<EscregArgs['obj']['get(address)uint64'] | EscregArgs['tuple']['get(address)uint64']>): EscregComposer<[...TReturns, EscregReturns['get(address)uint64'] | undefined]>

  /**
   * Calls the mustGet(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mustGet(params?: CallParams<EscregArgs['obj']['mustGet(address)uint64'] | EscregArgs['tuple']['mustGet(address)uint64']>): EscregComposer<[...TReturns, EscregReturns['mustGet(address)uint64'] | undefined]>

  /**
   * Calls the getList(address[])uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getList(params?: CallParams<EscregArgs['obj']['getList(address[])uint64[]'] | EscregArgs['tuple']['getList(address[])uint64[]']>): EscregComposer<[...TReturns, EscregReturns['getList(address[])uint64[]'] | undefined]>

  /**
   * Calls the mustGetList(address[])uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mustGetList(params?: CallParams<EscregArgs['obj']['mustGetList(address[])uint64[]'] | EscregArgs['tuple']['mustGetList(address[])uint64[]']>): EscregComposer<[...TReturns, EscregReturns['mustGetList(address[])uint64[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Escreg smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): EscregComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): EscregComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<EscregComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<EscregComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<EscregComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<EscregComposerResults<TReturns>>
}
export type EscregComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

