{
    "hints": {
        "register(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "registerList(uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "exists(address)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get(address)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mustGet(address)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getWithAuth(address)(uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "AddressWithAuth",
                    "elements": [
                        [
                            "appId",
                            "uint64"
                        ],
                        [
                            "authAppId",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getWithAuthList(address[])(uint64,uint64)[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getList(address[])uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mustGetList(address[])uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Escreg",
        "methods": [
            {
                "name": "register",
                "args": [
                    {
                        "type": "uint64",
                        "name": "appId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "registerList",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "appIds"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "exists",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "get",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "mustGet",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getWithAuth",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64)"
                }
            },
            {
                "name": "getWithAuthList",
                "args": [
                    {
                        "type": "address[]",
                        "name": "addresses"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64)[]"
                }
            },
            {
                "name": "getList",
                "args": [
                    {
                        "type": "address[]",
                        "name": "addresses"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "mustGetList",
                "args": [
                    {
                        "type": "address[]",
                        "name": "addresses"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}